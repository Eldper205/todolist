import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../model/todo_model.dart';

class TodoProvider with ChangeNotifier {
  List<Todos> _todos = [];
  List<Todos> get todos => _todos;

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Dio _dio = Dio();
  bool isLoading = true;

  // Fetch TODOs from both Firebase and API
  Future<void> fetchTodos() async {
    try {
      isLoading = true;
      _todos.clear(); // Clear existing data to avoid duplicate entries
      notifyListeners();

      // Fetch from API
      await fetchTodosAPI();

      // Fetch from Firebase
      await fetchTodosFromFirebase();

      isLoading = false;
      notifyListeners();
    } catch (e) {
      isLoading = false;
      notifyListeners();
      print("Error fetching todos: $e");
    }
  }

  // Fetch TODOs from Firebase
// Updated fetchTodosFromFirebase method in TodoProvider class
  Future<void> fetchTodosFromFirebase() async {
    try {
      print("Fetching TODOs from Firebase...");
      QuerySnapshot snapshot = await _firestore.collection('Todos').get();

      if (snapshot.docs.isNotEmpty) {
        print("Firebase data fetched successfully.");
        List<Todos> firebaseTodos = snapshot.docs.map((doc) {
          Map<String, dynamic> data = doc.data() as Map<String, dynamic>;

          // Parse date and time properly
          DateTime? dueDate = data['dueDate'] != null ? DateTime.parse(data['dueDate']) : null;
          TimeOfDay? dueTime;

          if (data['dueTime'] != null) {
            final parts = data['dueTime'].split(':');
            if (parts.length == 2) {
              dueTime = TimeOfDay(hour: int.parse(parts[0]), minute: int.parse(parts[1]));
            }
          }

          return Todos(
            id: doc.id,
            todo: data['todo'],
            completed: data['completed'],
            userId: data['userId'],
            dueDate: dueDate,
            dueTime: dueTime,
          );
        }).toList();

        _todos.addAll(firebaseTodos);
        notifyListeners();
      } else {
        print("No TODOs found in Firebase.");
      }
    } catch (e) {
      print("Error fetching todos from Firebase: $e");
    }
  }


  // Fetch TODOs from API
  Future<void> fetchTodosAPI() async {
    try {
      print("Fetching TODOs from API...");
      final response = await _dio.get('https://dummyjson.com/todos/user/1?limit=5');
      final fetchedData = Autogenerated.fromJson(response.data);

      if (fetchedData.todos != null) {
        print("API data fetched successfully.");
        _todos.addAll(fetchedData.todos!);
        notifyListeners();
      } else {
        print("No TODOs found in API response.");
      }
    } catch (e) {
      print("Error occurred: $e");
    }
  }

  // Add TODOs to Firebase
  Future<void> addTodoToFirebase(Todos todo) async {
    try {
      DocumentReference docRef = await _firestore.collection('Todos').add(todo.toJson());
      todo.id = docRef.id;
      _todos.add(todo);
      notifyListeners();
    } catch (e) {
      print("Error adding todo to Firebase: $e");
    }
  }

  // Update TODOs in Firebase
  Future<void> updateTodoInFirebase(Todos todo) async {
    try {
      await _firestore.collection('Todos').doc(todo.id.toString()).update(todo.toJson());
      final index = _todos.indexWhere((t) => t.id == todo.id);
      if (index != -1) {
        _todos[index] = todo;
        notifyListeners();
      }
    } catch (e) {
      print("Error updating todo in FIrebase: $e");
    }
  }

  void toggleTodoCompletion(String id) {
    final index = _todos.indexWhere((todo) => todo.id == id);
    if (index != -1) {
      _todos[index].completed = !_todos[index].completed!;
      notifyListeners();
    }
  }

  // Delete TODOs from Firebase
  Future<void> deleteTodoInFirebase(String id) async {
    try {
      await _firestore.collection('Todos').doc(id).delete();
      _todos.removeWhere((todo) => todo.id == id);
      notifyListeners();
    } catch (e) {
      print("Error deleting todo from Firebase: $e");
    }
  }

  // Delete checked TODOs from Firebase
  Future<void> deleteCheckedTodos() async {
    try {
      List<Todos> checkedTodos = _todos.where((todo) => todo.completed == true).toList();
      for (Todos todo in checkedTodos) {
        await deleteTodoInFirebase(todo.id!);
      }
    } catch (e) {
      print("Error deleting checked todos: $e");
    }
  }
}
