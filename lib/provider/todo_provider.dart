import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../model/todo_model.dart';

class TodoProvider with ChangeNotifier {

  List<Todos> _todos = [];

  List<Todos> get todos => _todos;

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  final Dio _dio = Dio();
  bool isLoading = true;

  // Fetch TODOs from both Firebase and API
  Future<void> fetchTodos() async {
    try {
      isLoading = true;
      notifyListeners();

      // Fetch from Firebase
      await fetchTodosFromFirebase();

      // Fetch from API
      await fetchTodosAPI();

      isLoading = false;
      notifyListeners();
    } catch (e) {
      isLoading = false;
      notifyListeners();
      print("Error fetching todos: $e");
    }
  }

  // Fetch TODOs from Firebase
  Future<void> fetchTodosFromFirebase() async {
    try {
      QuerySnapshot snapshot = await _firestore.collection('Todos').get();
      _todos = snapshot.docs.map((doc) => Todos.fromJson(doc.data() as Map<String, dynamic>)).toList();
      notifyListeners();
    } catch (e) {
      print("Error fetching todos from Firebase: $e");
    }
  }

  // Fetch TODOs from API
  Future<void> fetchTodosAPI() async {
    try {
      print("Fetching TODOs...");
      final response = await _dio.get('https://dummyjson.com/todos/user/1?limit=5');
      print("Response received: ${response.data}");
      final fetchedData = Autogenerated.fromJson(response.data);
      _todos = fetchedData.todos ?? [];
      print("Todos List: $_todos"); // This should print the todos
      notifyListeners();
    } catch (e) {
      print("Error occurred: $e");
    }
  }

  
  // Add TODOs to Firebase
  Future<void> addTodoToFirebase(Todos todo) async {
    try {
      DocumentReference docRef = await _firestore.collection('Todos').add(todo.toJson());
      todo.id = docRef.id; // Keep the ID as a string
      _todos.add(todo);
      notifyListeners();
    } catch (e) {
      print("Error adding todo to Firebase: $e");
    }
  }

  // Update TODOs in Firebase
  Future<void> updateTodoInFirebase(Todos todo) async {
    try {
      await _firestore.collection('Todos').doc(todo.id.toString()).update(todo.toJson());
      final index = _todos.indexWhere((t) => t.id == todo.id);
      if (index != -1) {
        _todos[index] = todo;
        notifyListeners();
      }
    } catch (e) {
      print("Error updating todo in FIrebase: $e");
    }
  }


  void toggleTodoCompletion(String id) {
    final index = _todos.indexWhere((todo) => todo.id == id);
    if (index != -1) {
      _todos[index].completed = !_todos[index].completed!;
      notifyListeners();
    }
  }

  // Delete TODOs from Firebase
  Future<void> deleteTodoInFirebase(String id) async {
    try {
      await _firestore.collection('Todos').doc(id.toString()).delete();
      _todos.removeWhere((todo) => todo.id == id);
      notifyListeners();
    } catch (e) {
      print("Error deleting todo from Firebase: $e");
    }
  }

  // Delete checked TODOs from Firebase
  Future<void> deleteCheckedTodos() async {
    try {
      List<Todos> checkedTodos = _todos.where((todo) => todo.completed == true).toList();
      for (Todos todo in checkedTodos) {
        await deleteTodoInFirebase(todo.id!);
      }
    } catch (e) {
      print("Error deleting checked todos: $e");
    }
  }
}